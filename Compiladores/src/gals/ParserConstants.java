package gals;

public interface ParserConstants
{
    int START_SYMBOL = 58;

    int FIRST_NON_TERMINAL    = 58;
    int FIRST_SEMANTIC_ACTION = 92;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1,  1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 77, 78, 78, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 83, 79, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 30, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, 37, 34, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, 36, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1,  2,  2, -1, -1, -1,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1,  3, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1 },
        { -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 72, 73, 73, 73, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 13, 12, -1, -1, -1, 13, -1, 13, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 49, 49, -1, 48, 48, 48, -1, 49, -1, 49, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 58, 58, -1, 58, 58, 58, -1, 58, -1, 58, 57, 57, -1, -1, -1, -1, -1, 58, 58, 58, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, -1, 57, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, 42, -1, 41, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 64, 64, -1, 64, 64, 64, -1, 64, -1, 64, 64, 64, 63, 63, -1, -1, -1, 64, 64, 64, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, -1, 64, 63, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, 63 },
        { -1, -1, -1, -1, -1, 76, 76, -1, 76, 76, 76, 74, 76, 75, 76, 76, 76, 76, 76, -1, -1, -1, 76, 76, 76, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 76, -1, -1, 76, 76, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, 76 },
        { -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  8, -1, -1, -1,  4,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 62, 62, 62, 62, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 28,  2,  6, 59,  8 },
        { 64, 65, 60 },
        { 89, 67, 72, 71,  6, 64 },
        {  0 },
        { 35 },
        { 50 },
        { 36 },
        { 30 },
        { 31, 14, 61, 15 },
        { 14, 61, 15 },
        {  0 },
        {  2, 79 },
        {  7, 72 },
        {  0 },
        { 11, 61 },
        {  0 },
        { 66,  6, 65 },
        {  0 },
        { 53,  2, 78, 90,  6, 59 },
        { 12, 74, 72, 20, 89, 84, 13 },
        {  0 },
        {  6, 74, 72, 20, 89, 84 },
        {  0 },
        { 20, 89 },
        {  0 },
        { 54 },
        { 55 },
        { 26, 63, 82, 27 },
        {  6, 63, 82 },
        {  0 },
        {  2, 85 },
        { 60 },
        { 38, 68, 39, 63, 88 },
        { 52, 68, 49, 63 },
        { 41, 12, 72, 13 },
        { 42, 12, 73, 13 },
        { 56, 68 },
        {  0 },
        { 40, 63 },
        {  0 },
        { 21, 68 },
        { 14, 68, 15, 21, 68 },
        { 12, 73, 13 },
        {  0 },
        { 68, 80 },
        {  7, 68, 80 },
        {  0 },
        { 69, 81 },
        { 77, 69 },
        {  0 },
        { 11 },
        { 10 },
        {  9 },
        { 25 },
        { 24 },
        { 23 },
        { 91, 83 },
        { 75, 91, 83 },
        {  0 },
        { 16 },
        { 17 },
        { 43 },
        { 70, 86 },
        { 76, 70, 86 },
        {  0 },
        { 18 },
        { 19 },
        { 57 },
        { 44 },
        { 45, 70 },
        { 17, 70 },
        { 12, 68, 13 },
        {  2, 87 },
        { 62 },
        { 12, 68, 80, 13 },
        { 14, 68, 15 },
        {  0 },
        {  2 },
        { 62 },
        {  4 },
        {  5 },
        { 46 },
        { 47 },
        {  3 }
    };

//    String[] PARSER_ERROR =
//    {
//        "",
//        "Era esperado fim de programa",
//        "Era esperado id",
//        "Era esperado literal",
//        "Era esperado num_int",
//        "Era esperado num_real",
//        "Era esperado \";\"",
//        "Era esperado \",\"",
//        "Era esperado \".\"",
//        "Era esperado \">\"",
//        "Era esperado \"<\"",
//        "Era esperado \"=\"",
//        "Era esperado \"(\"",
//        "Era esperado \")\"",
//        "Era esperado \"[\"",
//        "Era esperado \"]\"",
//        "Era esperado \"+\"",
//        "Era esperado \"-\"",
//        "Era esperado \"*\"",
//        "Era esperado \"/\"",
//        "Era esperado \":\"",
//        "Era esperado \":=\"",
//        "Era esperado \"..\"",
//        "Era esperado \"<>\"",
//        "Era esperado \"<=\"",
//        "Era esperado \">=\"",
//        "Era esperado \"{\"",
//        "Era esperado \"}\"",
//        "Era esperado programa",
//        "Era esperado var",
//        "Era esperado caracter",
//        "Era esperado cadeia",
//        "Era esperado procedimento",
//        "Era esperado inicio",
//        "Era esperado fim",
//        "Era esperado inteiro",
//        "Era esperado booleano",
//        "Era esperado funcao",
//        "Era esperado se",
//        "Era esperado entao",
//        "Era esperado senao",
//        "Era esperado leia",
//        "Era esperado escreva",
//        "Era esperado ou",
//        "Era esperado e",
//        "Era esperado nao",
//        "Era esperado falso",
//        "Era esperado verdadeiro",
//        "Era esperado de",
//        "Era esperado faca",
//        "Era esperado real",
//        "Era esperado vetor",
//        "Era esperado enquanto",
//        "Era esperado metodo",
//        "Era esperado ref",
//        "Era esperado val",
//        "Era esperado retorne",
//        "Era esperado div",
//        "<programa> inválido",
//        "<bloco> inválido",
//        "<com_composto> inválido",
//        "<constante> inválido",
//        "<constante_explicita> inválido",
//        "<comando> inválido",
//        "<dcl_var_const> inválido",
//        "<dcl_metodos> inválido",
//        "<dcl_metodo> inválido",
//        "<dimensao> inválido",
//        "<expressao> inválido",
//        "<expsimp> inválido",
//        "<fator> inválido",
//        "<fator_const> inválido",
//        "<lid> inválido",
//        "<lista_expr> inválido",
//        "<mp_par> inválido",
//        "<op_add> inválido",
//        "<op_mult> inválido",
//        "<oprel> inválido",
//        "<par_formais> inválido",
//        "<rep_lid> inválido",
//        "<rep_lexpr> inválido",
//        "<resto_expressao> inválido",
//        "<replistacomando> inválido",
//        "<rep_expsimp> inválido",
//        "<rep_par> inválido",
//        "<rcomid> inválido",
//        "<rep_termo> inválido",
//        "<rvar> inválido",
//        "<senaoparte> inválido",
//        "<tipo> inválido",
//        "<tipo_metodo> inválido",
//        "<termo> inválido"
//   };
            
            
             String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim do programa",
        "Era esperado um id",
        "Era esperado um literal",
        "Era esperado um numero inteiro",
        "Era esperado um numero real",
        "Era esperado \";\"",
        "Era esperado \",\"",
        "Era esperado \".\"",
        "Era esperado \">\"",
        "Era esperado \"<\"",
        "Era esperado \"=\"",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \"[\"",
        "Era esperado \"]\"",
        "Era esperado \"+\"",
        "Era esperado \"-\"",
        "Era esperado \"*\"",
        "Era esperado \"/\"",
        "Era esperado \":\"",
        "Era esperado \":=\"",
        "Era esperado \"..\"",
        "Era esperado \"<>\"",
        "Era esperado \"<=\"",
        "Era esperado \">=\"",
        "Era esperado \"{\"",
        "Era esperado \"}\"",
        "Era esperado programa",
        "Era esperado var",
        "Era esperado caracter",
        "Era esperado cadeia",
        "Era esperado procedimento",
        "Era esperado inicio",
        "Era esperado fim",
        "Era esperado inteiro",
        "Era esperado booleano",
        "Era esperado funcao",
        "Era esperado se",
        "Era esperado entao",
        "Era esperado senao",
        "Era esperado leia",
        "Era esperado escreva",
        "Era esperado ou",
        "Era esperado e",
        "Era esperado nao",
        "Era esperado falso",
        "Era esperado verdadeiro",
        "Era esperado de",
        "Era esperado faca",
        "Era esperado real",
        "Era esperado vetor",
        "Era esperado enquanto",
        "Era esperado metodo",
        "Era esperado ref",
        "Era esperado val",
        "Era esperado retorne",
        "Era esperado div",
        "Estrutura do programa inválida",
        "Estrutura do bloco inválida",
        "Comando composto inválido",
        "Constante inválida",
        "Constante explícita inválida",
        "Comando inválido",
        "Declaração de variável inválida",
        "Declaração de método inválida",
        "Declaração de método inválida",
        "Dimensão inválida",
        "Expressão inválida",
        "Expressão simples inválida",
        "Fator inválido",
        "Fator constante inválido",
        "Lista de identificadores inválida",
        "Lista de expressões inválida",
        "Paramêtro inválido, deve ser ref ou val",
        "Operador inválido",
        "Operador inválido",
        "Operador relacional inválido",
        "Estrutura de paramêtro inválido",
        "Lista de identificadores inválido",
        "Lista de expressões inválida",
        "Expressão inválida",
        "Comando inválido",
        "Expressão simples inválida",
        "Lista de paramêtros inválida",
        "Comando inválido",
        "Termo inválido",
        "Variável inválida",
        "Estrutura senao inválida",
        "Tipo inválido",
        "Tipo do método inválido",
        "Termo inválido"
    };
            
            
}
